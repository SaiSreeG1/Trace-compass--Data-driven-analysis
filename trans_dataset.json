{
    "User_Inputted": {
        "With a trace containing 'auth failure' events, plot the number of times a user id failed to connect vs time.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"../../org.eclipse.tracecompass.tmf.analysis.xml.core/src/org/eclipse/tracecompass/tmf/analysis/xml/core/module/xmlDefinition.xsd\">\n    <stateProvider version=\"0\" id=\"ssh.failed.connections\">\n        <head>\n            <traceType id=\"custom.txt.trace:Syslog:OpenSSHD\" />\n            <label value=\"Failed connections\" />\n        </head>\n        <eventHandler eventName=\"AUTH FAILURE\">\n            <stateChange>\n                <stateAttribute type=\"eventField\" value=\"UserID\" />\n                <stateAttribute type=\"eventField\" value=\"Message\" />\n                <stateValue type=\"int\" value=\"1\" increment=\"true\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"eventField\" value=\"UserID\" />\n                <stateValue type=\"int\" value=\"1\" increment=\"true\" />\n            </stateChange>\n        </eventHandler>\n    </stateProvider>\n    <xyView id=\"failed.connections\">\n        <head>\n            <analysis id=\"ssh.failed.connections\" />\n            <label value=\"Failed Connections\" />\n        </head>\n        <entry path=\"*\" displayType=\"delta\">\n            <display type=\"self\" />\n        </entry>\n    </xyView>\n    </tmfxml>"
        },
        "Given the state system plot the user bandwidth, it is every attribute under the user/* branch.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"../../org.eclipse.tracecompass.tmf.analysis.xml.core/src/org/eclipse/tracecompass/tmf/analysis/xml/core/module/xmlDefinition.xsd\">\n    <xyView id=\"endpoint.bandwidth\">\n        <head>\n            <analysis id=\"org.eclipse.tracecompass.incubator.internal.system.core.analsysis.httpd.HttpdConnectionAnalysis\" />\n            <label value=\"Endpoint Bandwidth\" />\n        </head>\n        <entry path=\"endpoint/*\"\n               displayType=\"delta\">\n            <display type=\"self\" />\n        </entry>\n    </xyView>\n    <xyView id=\"ip.bandwidth\">\n        <head>\n            <analysis id=\"org.eclipse.tracecompass.incubator.internal.system.core.analsysis.httpd.HttpdConnectionAnalysis\" />\n            <label value=\"IP Bandwidth\" />\n        </head>\n        <entry path=\"ip/*\"\n               displayType=\"delta\">\n            <display type=\"self\" />\n        </entry>\n    </xyView>\n    <xyView id=\"user.bandwidth\">\n        <head>\n            <analysis id=\"org.eclipse.tracecompass.incubator.internal.system.core.analsysis.httpd.HttpdConnectionAnalysis\" />\n            <label value=\"User Bandwidth\" />\n        </head>\n        <entry path=\"user/*\"\n               displayType=\"delta\">\n            <display type=\"self\" />\n        </entry>\n    </xyView>\n</tmfxml>"
        },
        "Give me statistics on GC durations using the field Pause and classifying by type.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <pattern version=\"1\"\n             id=\"system.gc.duration\">\n        <head>\n            <label value=\"GC Segments\" />\n        </head>\n        <patternHandler>\n            <action id=\"segment_create\">\n                <segment>\n                    <segType>\n                        <segName>\n                            <stateValue type=\"eventField\"\n                                        value=\"Cause\" />\n                        </segName>\n                    </segType>\n                    <segTime>\n                        <begin type=\"eventField\"\n                               value=\"timestamp\" />\n                        <duration type=\"eventField\"\n                                  value=\"Pause\" />\n                    </segTime>\n                </segment>\n            </action>\n            <fsm id=\"gcs\"\n                 multiple=\"true\">\n                <state id=\"start\">\n                    <transition event=\"*\"\n                                target=\"duration\"\n                                action=\"segment_create\" />\n                </state>\n                <final id=\"duration\" />\n            </fsm>\n        </patternHandler>\n    </pattern>\n</tmfxml>"
        },
        "Analyze futex contention with a detailed state machine using the futex.h definitions. Include conditions, transitions, segment creations, and visualize scenarios over time. Plot the uaddr vs waiter and show different states like WAIT, IN_PROGRESS, MATCHED, and ABANDONED in a timegraph view.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <!-- Timegraph view for uaddr x TID -->\n    <timeGraphView id=\"lttng2.kernel.core.futex.uaddrvswaiter\">\n        <head>\n            <analysis id=\"lttng.analysis.futex\" />\n            <label value=\"Uaddr vs Waiter\" />\n        </head>\n        <definedValue name=\"WAIT\"\n                      value=\"1\"\n                      color=\"#646464\" />\n        <entry path=\"lock/*\">\n            <display type=\"self\" />\n            <entry path=\"*\">\n                <display type=\"self\" />\n            </entry>\n        </entry>\n    </timeGraphView>\n    <!-- Timegraph view that show the scenario execution state in time -->\n    <timeGraphView id=\"lttng2.kernel.core.futex.scenarios\">\n        <head>\n            <analysis id=\"lttng.analysis.futex\" />\n            <label value=\"Scenarios\" />\n        </head>\n        <!-- FFA040 -->\n        <definedValue name=\"PENDING\"\n                      value=\"0\"\n                      color=\"#CCCCCC\" />\n        <definedValue name=\"IN_PROGRESS\"\n                      value=\"1\"\n                      color=\"#00CCFF\" />\n        <definedValue name=\"MATCHED\"\n                      value=\"2\"\n                      color=\"#118811\" />\n        <definedValue name=\"ABANDONED\"\n                      value=\"3\"\n                      color=\"#EE0000\" />\n        <!-- Scenario view -->\n        <entry path=\"scenarios/*\">\n            <display type=\"self\" />\n            <name type=\"self\" />\n            <entry path=\"*\">\n                <display type=\"constant\"\n                         value=\"status\" />\n                <name type=\"self\" />\n            </entry>\n        </entry>\n    </timeGraphView>\n    <pattern version=\"0\"\n             id=\"lttng.analysis.futex\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.lttng2.kernel.tracetype\" />\n            <label value=\"Futex Contention Analysis\" />\n            <viewLabelPrefix value=\"Contention\" />\n        </head>\n        <location id=\"CurrentCPU\">\n            <stateAttribute type=\"constant\"\n                            value=\"CPUs\" />\n            <stateAttribute type=\"eventField\"\n                            value=\"cpu\" />\n        </location>\n        <location id=\"CurrentThread\">\n            <stateAttribute type=\"location\"\n                            value=\"CurrentCPU\" />\n            <stateAttribute type=\"constant\"\n                            value=\"Current_thread\" />\n        </location>\n        <location id=\"CurrentThreadName\">\n            <stateAttribute type=\"location\"\n                            value=\"CurrentCPU\" />\n            <stateAttribute type=\"constant\"\n                            value=\"Current_thread_name\" />\n        </location>\n        <mappingGroup id=\"lock/unlock\">\n            <entry>\n                <stateValue type=\"long\"\n                            value=\"128\" />\n                <stateValue type=\"string\"\n                            value=\"WAIT\" />\n            </entry>\n            <entry>\n                <stateValue type=\"long\"\n                            value=\"137\" />\n                <stateValue type=\"string\"\n                            value=\"WAIT_BITSET\" />\n            </entry>\n            <entry>\n                <stateValue type=\"long\"\n                            value=\"134\" />\n                <stateValue type=\"string\"\n                            value=\"LOCK_PI\" />\n            </entry>\n            <entry>\n                <stateValue type=\"long\"\n                            value=\"136\" />\n                <stateValue type=\"string\"\n                            value=\"TRYLOCK_PI\" />\n            </entry>\n            <entry>\n                <stateValue type=\"long\"\n                            value=\"129\" />\n                <stateValue type=\"string\"\n                            value=\"WAKE\" />\n            </entry>\n            <entry>\n                <stateValue type=\"long\"\n                            value=\"138\" />\n                <stateValue type=\"string\"\n                            value=\"WAKE_BITSET\" />\n            </entry>\n            <entry>\n                <stateValue type=\"long\"\n                            value=\"135\" />\n                <stateValue type=\"string\"\n                            value=\"UNLOCK_PI\" />\n            </entry>\n            <entry>\n                <stateValue type=\"long\"\n                            value=\"133\" />\n                <stateValue type=\"string\"\n                            value=\"WAKE_OP\" />\n            </entry>\n        </mappingGroup>\n        <patternHandler>\n            <test id=\"futex_condition\">\n                <if>\n                    <condition>\n                        <stateValue type=\"string\"\n                                    stack=\"peek\">\n                            <stateAttribute type=\"constant\"\n                                            value=\"stack\" />\n                            <stateAttribute type=\"query\">\n                                <stateAttribute type=\"location\"\n                                                value=\"CurrentThread\" />\n                            </stateAttribute>\n                        </stateValue>\n                        <stateValue type=\"string\"\n                                    value=\"sys_futex\" />\n                    </condition>\n                </if>\n            </test>\n            <test id=\"unlock_op\">\n                <if>\n                    <or>\n                        <condition>\n                            <field name=\"op\" />\n                            <stateValue type=\"long\"\n                                        value=\"129\" />\n                        </condition>\n                        <condition>\n                            <field name=\"op\" />\n                            <stateValue type=\"long\"\n                                        value=\"138\" />\n                        </condition>\n                        <condition>\n                            <field name=\"op\" />\n                            <stateValue type=\"long\"\n                                        value=\"135\" />\n                        </condition>\n                        <condition>\n                            <field name=\"op\" />\n                            <stateValue type=\"long\"\n                                        value=\"133\" />\n                        </condition>\n                    </or>\n                </if>\n            </test>\n            <test id=\"lock_op\">\n                <if>\n                    <or>\n                        <condition>\n                            <field name=\"op\" />\n                            <stateValue type=\"long\"\n                                        value=\"128\" />\n                        </condition>\n                        <condition>\n                            <field name=\"op\" />\n                            <stateValue type=\"long\"\n                                        value=\"137\" />\n                        </condition>\n                        <condition>\n                            <field name=\"op\" />\n                            <stateValue type=\"long\"\n                                        value=\"134\" />\n                        </condition>\n                        <condition>\n                            <field name=\"op\" />\n                            <stateValue type=\"long\"\n                                        value=\"136\" />\n                        </condition>\n                    </or>\n                </if>\n            </test>\n            <test id=\"tid_condition\">\n                <if>\n                    <condition>\n                        <stateValue type=\"query\">\n                            <stateAttribute type=\"constant\"\n                                            value=\"#CurrentScenario\" />\n                            <stateAttribute type=\"constant\"\n                                            value=\"thread\" />\n                        </stateValue>\n                        <stateValue type=\"query\">\n                            <stateAttribute type=\"location\"\n                                            value=\"CurrentThread\" />\n                        </stateValue>\n                    </condition>\n                </if>\n            </test>\n            <test id=\"isTidValid\">\n                <if>\n                    <not>\n                        <condition>\n                            <stateAttribute type=\"location\"\n                                            value=\"CurrentThread\" />\n                            <stateValue type=\"null\" />\n                        </condition>\n                    </not>\n                </if>\n            </test>\n            <!-- FUTEX FSM ACTIONS -->\n            <action id=\"set_operation\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"#CurrentScenario\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"op\" />\n                    <stateValue type=\"eventField\"\n                                value=\"op\" />\n                </stateChange>\n            </action>\n            <action id=\"waiter_in\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"lock\" />\n                    <stateAttribute type=\"query\">\n                        <stateAttribute type=\"constant\"\n                                        value=\"#CurrentScenario\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"uaddr\" />\n                    </stateAttribute>\n                    <stateAttribute type=\"query\">\n                        <stateAttribute type=\"constant\"\n                                        value=\"#CurrentScenario\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"thread\" />\n                    </stateAttribute>\n                    <stateValue type=\"int\"\n                                value=\"1\" />\n                </stateChange>\n            </action>\n            <action id=\"waiter_out\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"lock\" />\n                    <stateAttribute type=\"query\">\n                        <stateAttribute type=\"constant\"\n                                        value=\"#CurrentScenario\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"uaddr\" />\n                    </stateAttribute>\n                    <stateAttribute type=\"query\">\n                        <stateAttribute type=\"constant\"\n                                        value=\"#CurrentScenario\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"thread\" />\n                    </stateAttribute>\n                    <stateValue type=\"null\" />\n                </stateChange>\n            </action>\n            <action id=\"create_futex_segment\">\n                <segment>\n                    <segType>\n                        <segName>\n                            <stateValue type=\"query\"\n                                        mappingGroup=\"lock/unlock\">\n                                <stateAttribute type=\"constant\"\n                                                value=\"#CurrentScenario\" />\n                                <stateAttribute type=\"constant\"\n                                                value=\"op\" />\n                            </stateValue>\n                        </segName>\n                    </segType>\n                    <segContent>\n                        <segField name=\"uaddr\"\n                                  type=\"string\">\n                            <stateValue type=\"query\">\n                                <stateAttribute type=\"constant\"\n                                                value=\"#CurrentScenario\" />\n                                <stateAttribute type=\"constant\"\n                                                value=\"uaddr\" />\n                            </stateValue>\n                        </segField>\n                        <segField name=\"name\"\n                                  type=\"string\">\n                            <stateValue type=\"query\">\n                                <stateAttribute type=\"constant\"\n                                                value=\"#CurrentScenario\" />\n                                <stateAttribute type=\"constant\"\n                                                value=\"thread_name\" />\n                            </stateValue>\n                        </segField>\n                        <segField name=\"thread\"\n                                  type=\"string\">\n                            <stateValue type=\"query\">\n                                <stateAttribute type=\"constant\"\n                                                value=\"#CurrentScenario\" />\n                                <stateAttribute type=\"constant\"\n                                                value=\"thread\" />\n                            </stateValue>\n                        </segField>\n                    </segContent>\n                </segment>\n            </action>\n            <action id=\"saveContext\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"#CurrentScenario\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"cpu\" />\n                    <stateValue type=\"eventField\"\n                                value=\"cpu\" />\n                </stateChange>\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"#CurrentScenario\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"uaddr\" />\n                    <stateValue type=\"eventField\"\n                                value=\"uaddr\" />\n                </stateChange>\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"#CurrentScenario\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"thread\" />\n                    <stateValue type=\"query\">\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentThread\" />\n                    </stateValue>\n                </stateChange>\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"#CurrentScenario\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"thread_name\" />\n                    <stateValue type=\"query\">\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentThreadName\" />\n                    </stateValue>\n                </stateChange>\n            </action>\n            <!-- SYSCALL FSM ACTIONS -->\n            <action id=\"push_syscall\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"stack\" />\n                    <stateAttribute type=\"query\">\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Current_thread\" />\n                    </stateAttribute>\n                    <stateValue stack=\"push\"\n                                type=\"eventName\" />\n                </stateChange>\n            </action>\n            <action id=\"pop_syscall\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"stack\" />\n                    <stateAttribute type=\"query\">\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Current_thread\" />\n                    </stateAttribute>\n                    <stateValue stack=\"pop\"\n                                type=\"string\" />\n                </stateChange>\n            </action>\n            <fsm id=\"futex_lock_2_4\">\n                <precondition event=\"*sys*\"\n                              cond=\"isTidValid\" />\n                <initialState>\n                    <transition event=\"sys_futex\"\n                                cond=\"isTidValid:lock_op\"\n                                target=\"syscall_entry_x\"\n                                action=\"saveContext:set_operation:waiter_in\" />\n                </initialState>\n                <state id=\"syscall_entry_x\">\n                    <transition event=\"exit_syscall\"\n                                cond=\"futex_condition:tid_condition\"\n                                target=\"syscall_exit_x\"\n                                action=\"waiter_out:create_futex_segment\" />\n                </state>\n                <final id=\"syscall_exit_x\" />\n            </fsm>\n            <fsm id=\"futex_unlock_2_4\">\n                <precondition event=\"*sys*\"\n                              cond=\"isTidValid\" />\n                <initialState>\n                    <transition event=\"sys_futex\"\n                                cond=\"isTidValid:unlock_op\"\n                                target=\"syscall_entry_x\"\n                                action=\"saveContext:set_operation\" />\n                </initialState>\n                <state id=\"syscall_entry_x\">\n                    <transition event=\"exit_syscall\"\n                                cond=\"futex_condition:tid_condition\"\n                                target=\"syscall_exit_x\"\n                                action=\"create_futex_segment\" />\n                </state>\n                <final id=\"syscall_exit_x\" />\n            </fsm>\n            <fsm id=\"stack\"\n                 multiple=\"false\">\n                <precondition event=\"sys_*\" />\n                <precondition event=\"exit_syscall\" />\n                <precondition cond=\"isTidValid\" />\n                <state id=\"foo\">\n                    <transition event=\"sys_*\"\n                                target=\"foo\"\n                                action=\"push_syscall\" />\n                    <transition event=\"exit_syscall\"\n                                target=\"foo\"\n                                action=\"pop_syscall\" />\n                </state>\n            </fsm>\n            <fsm id=\"futex_lock_2_7\">\n                <precondition event=\"syscall_*_futex\"\n                              cond=\"isTidValid\" />\n                <initialState>\n                    <transition event=\"syscall_entry_futex\"\n                                cond=\"isTidValid:lock_op\"\n                                target=\"syscall_entry_x\"\n                                action=\"saveContext:set_operation:waiter_in\" />\n                </initialState>\n                <state id=\"syscall_entry_x\">\n                    <transition event=\"syscall_exit_futex\"\n                                cond=\"tid_condition\"\n                                target=\"syscall_exit_x\"\n                                action=\"waiter_out:create_futex_segment\" />\n                </state>\n                <final id=\"syscall_exit_x\" />\n            </fsm>\n            <fsm id=\"futex_unlock_2_7\">\n                <precondition event=\"syscall_*_futex\"\n                              cond=\"isTidValid\" />\n                <initialState>\n                    <transition event=\"syscall_entry_futex\"\n                                cond=\"isTidValid:unlock_op\"\n                                target=\"syscall_entry_x\"\n                                action=\"saveContext:set_operation\" />\n                </initialState>\n                <state id=\"syscall_entry_x\">\n                    <transition event=\"syscall_exit_futex\"\n                                cond=\"tid_condition\"\n                                target=\"syscall_exit_x\"\n                                action=\"create_futex_segment\" />\n                </state>\n                <final id=\"syscall_exit_x\" />\n            </fsm>\n            <!-- SCHED_SWITCH -->\n            <action id=\"update_current_thread\">\n                <stateChange>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentThread\" />\n                    <stateValue type=\"eventField\"\n                                value=\"next_tid\" />\n                </stateChange>\n            </action>\n            <action id=\"update_current_thread_name\">\n                <stateChange>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentThreadName\" />\n                    <stateValue type=\"eventField\"\n                                value=\"next_comm\" />\n                </stateChange>\n            </action>\n            <fsm id=\"sched_switch\"\n                 multiple=\"false\">\n                <precondition event=\"sched_switch\" />\n                <state id=\"sched_switch\">\n                    <transition target=\"sched_switch\"\n                                action=\"update_current_thread:update_current_thread_name\" />\n                </state>\n            </fsm>\n        </patternHandler>\n    </pattern>\n</tmfxml>"
        },
        "Track and display KVM exit reasons, showing the counts of each exit_reason over time in a delta format.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <xyView id=\"kernel.kvm.exit.xychart\">\n        <head>\n            <analysis id=\"kernel.kvm.exit.sp\" />\n            <label value=\"Exit reasons\" />\n        </head>\n        <entry path=\"Reasons/*\"\n               displayType=\"delta\">\n            <display type=\"self\" />\n        </entry>\n    </xyView>\n    <stateProvider id=\"kernel.kvm.exit.sp\"\n                   version=\"1\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.lttng2.kernel.tracetype\" />\n            <label value=\"KVM exit reasons\" />\n        </head>\n        <!-- case 1 : exit_syscall : Fields: int64 ret -->\n        <eventHandler eventName=\"kvm_exit\">\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"Reasons\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"exit_reason\" />\n                <stateValue type=\"int\"\n                            value=\"1\"\n                            increment=\"true\" />\n            </stateChange>\n        </eventHandler>\n    </stateProvider>\n</tmfxml>"
        },
        "Monitor worker states by workerno for events: start (WORKING), wait (WAIT), and awake (IDLE).": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <stateProvider id=\"test.element.placement\"\n                   version=\"1\">\n        <location id=\"CurrentWorker\">\n            <stateAttribute type=\"constant\"\n                            value=\"Worker\" />\n            <stateAttribute type=\"eventField\"\n                            value=\"workerno\" />\n        </location>\n        <!-- StateValues -->\n        <definedValue name=\"WORKING\"\n                      value=\"3\" />\n        <eventHandler eventName=\"start\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentWorker\" />\n                <stateValue type=\"int\"\n                            value=\"$WORKING\" />\n            </stateChange>\n        </eventHandler>\n        <definedValue name=\"WAIT\"\n                      value=\"4\" />\n        <eventHandler eventName=\"wait\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentWorker\" />\n                <stateValue type=\"int\"\n                            value=\"$WAIT\" />\n            </stateChange>\n        </eventHandler>\n        <definedValue name=\"IDLE\"\n                      value=\"5\" />\n        <eventHandler eventName=\"awake\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentWorker\" />\n                <stateValue type=\"int\"\n                            value=\"$IDLE\" />\n            </stateChange>\n        </eventHandler>\n    </stateProvider>\n</tmfxml>"
        },
        "Increment state value by 1 for any event name, used for tracking statistics.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <stateProvider id=\"test.xml.attributes\"\n                   version=\"1\">\n        <!-- Test a increment of one on an event name, like for statistics -->\n        <eventHandler eventName=\"*\">\n            <stateChange>\n                <stateAttribute type=\"eventName\" />\n                <stateValue type=\"int\"\n                            value=\"1\"\n                            increment=\"true\" />\n            </stateChange>\n        </eventHandler>\n    </stateProvider>\n</tmfxml>"
        },
        "Analyze call stack for threads, tracking function entry and exit using tid and op fields.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <callstack id=\"callstack.analysis\">\n        <callstackGroup>\n            <level path=\"threads/*\" />\n        </callstackGroup>\n        <pattern version=\"0\"\n                 id=\"callstack.pattern\">\n            <head>\n                <traceType id=\"org.eclipse.linuxtools.tmf.core.tests.xmlstub\" />\n                <label value=\"Test XML callstack\" />\n            </head>\n            <patternHandler>\n                <action id=\"functionEntry\">\n                    <stateChange>\n                        <stateAttribute type=\"constant\"\n                                        value=\"threads\" />\n                        <stateAttribute type=\"eventField\"\n                                        value=\"tid\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"CallStack\" />\n                        <stateValue type=\"eventField\"\n                                    value=\"op\"\n                                    stack=\"push\" />\n                    </stateChange>\n                </action>\n                <action id=\"functionExit\">\n                    <stateChange>\n                        <stateAttribute type=\"constant\"\n                                        value=\"threads\" />\n                        <stateAttribute type=\"eventField\"\n                                        value=\"tid\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"CallStack\" />\n                        <stateValue type=\"eventField\"\n                                    value=\"op\"\n                                    stack=\"pop\" />\n                    </stateChange>\n                </action>\n                <fsm id=\"callstack\"\n                     multiple=\"false\"\n                     initial=\"oneState\">\n                    <state id=\"oneState\">\n                        <transition event=\"entry\"\n                                    target=\"oneState\"\n                                    action=\"functionEntry\" />\n                        <transition event=\"exit\"\n                                    target=\"oneState\"\n                                    action=\"functionExit\" />\n                    </state>\n                </fsm>\n            </patternHandler>\n        </pattern>\n    </callstack>\n    <timeGraphView id=\"callstack.pattern.tgview\">\n        <head>\n            <analysis id=\"callstack.analysis\" />\n            <label value=\"XML Callstack SS view\" />\n        </head>\n        <!-- StateValues -->\n        <!-- Control Flow View -->\n        <entry path=\"threads/*\">\n            <display type=\"self\" />\n            <entry path=\"callstack/*\">\n                <display type=\"self\" />\n            </entry>\n        </entry>\n    </timeGraphView>\n</tmfxml>"
        },
        "Test condition operators with event 'sched_switch' to track process status changes using prev_tid and next_tid fields.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <stateProvider id=\"kernel.linux.sp\"\n                   version=\"1\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.lttng2.kernel.tracetype\" />\n            <label value=\"Test Condition Operators\" />\n        </head>\n        <!-- StateValues -->\n        <definedValue name=\"PROCESS_STATUS_UNKNOWN\"\n                      value=\"0\" />\n        <definedValue name=\"PROCESS_STATUS_WAIT_BLOCKED\"\n                      value=\"1\" />\n        <definedValue name=\"PROCESS_STATUS_RUN_USERMODE\"\n                      value=\"2\" />\n        <definedValue name=\"PROCESS_STATUS_RUN_SYSCALL\"\n                      value=\"3\" />\n        <definedValue name=\"PROCESS_STATUS_INTERRUPTED\"\n                      value=\"5000\" />\n        <definedValue name=\"PROCESS_STATUS_WAIT_FOR_CPU\"\n                      value=\"10\" />\n        <location id=\"CurrentThread\">\n            <stateAttribute type=\"constant\"\n                            value=\"Threads\" />\n            <stateAttribute type=\"eventField\"\n                            value=\"next_tid\" />\n        </location>\n        <eventHandler eventName=\"sched_switch\">\n            <stateChange>\n                <if>\n                    <condition operator=\"ne\">\n                        <!-- operator can also be \"eq\", \"ge\", \"gt\", \"le\", \"lt\" -->\n                        <field name=\"prev_state\" />\n                        <stateValue type=\"long\"\n                                    value=\"0\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"prev_tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_WAIT_BLOCKED\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"prev_tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_WAIT_FOR_CPU\" />\n                </else>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition operator=\"gt\">\n                        <field name=\"next_tid\" />\n                        <stateValue type=\"long\"\n                                    value=\"0\" />\n                    </condition>\n                </if>\n                <then>\n                    <if>\n                        <condition>\n                            <!-- when the operation attribute is not set it is considered as \"eq\" (equal) -->\n                            <stateAttribute type=\"location\"\n                                            value=\"newCurrentThread\" />\n                            <stateAttribute type=\"constant\"\n                                            value=\"System_call\" />\n                            <stateValue type=\"null\" />\n                        </condition>\n                    </if>\n                    <then>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Status\" />\n                        <stateValue type=\"int\"\n                                    value=\"$CPU_STATUS_RUN_USERMODE\" />\n                    </then>\n                    <else>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Status\" />\n                        <stateValue type=\"int\"\n                                    value=\"$CPU_STATUS_RUN_SYSCALL\" />\n                    </else>\n                </then>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <!-- when the operation attribute is not set it is considered as \"eq\" (equal) -->\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentThread\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"System_call\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentThread\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_RUN_USERMODE\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentThread\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_RUN_SYSCALL\" />\n                </else>\n            </stateChange>\n        </eventHandler>\n        <eventHandler eventName=\"irq_handler_exit\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentIRQ\" />\n                <stateValue type=\"null\" />\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition operator=\"eq\">\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentThread\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"System_call\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentThread\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_RUN_USERMODE\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentThread\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_RUN_SYSCALL\" />\n                </else>\n            </stateChange>\n        </eventHandler>\n    </stateProvider>\n</tmfxml>"
        },
        "Evaluate conditions using event handlers for 'test' and 'test1' events, with attributes like testField, checkpoint, and conditions like and_three_operands and not_operand.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <stateProvider id=\"test.xml.conditions\"\n                   version=\"1\">\n        <eventHandler eventName=\"test\">\n            <stateChange>\n                <if>\n                    <condition>\n                        <field name=\"testField\" />\n                        <stateValue type=\"long\"\n                                    value=\"10\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"eventName\" />\n                    <stateValue type=\"long\"\n                                value=\"1\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"eventName\" />\n                    <stateValue type=\"long\"\n                                value=\"0\" />\n                </else>\n            </stateChange>\n        </eventHandler>\n        <eventHandler eventName=\"test1\">\n            <stateChange>\n                <if>\n                    <condition>\n                        <field name=\"testField\" />\n                        <stateValue type=\"long\"\n                                    value=\"200\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"eventName\" />\n                    <stateValue type=\"long\"\n                                value=\"1\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"eventName\" />\n                    <stateValue type=\"long\"\n                                value=\"0\" />\n                </else>\n            </stateChange>\n        </eventHandler>\n        <eventHandler eventName=\"*\">\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateValue type=\"query\">\n                            <stateAttribute type=\"constant\"\n                                            value=\"test\" />\n                        </stateValue>\n                        <stateValue type=\"query\">\n                            <stateAttribute type=\"constant\"\n                                            value=\"test1\" />\n                        </stateValue>\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"checkpoint\" />\n                    <stateValue type=\"long\"\n                                value=\"1\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"constant\"\n                                    value=\"checkpoint\" />\n                    <stateValue type=\"long\"\n                                value=\"0\" />\n                </else>\n            </stateChange>\n        </eventHandler>\n        <eventHandler eventName=\"*\">\n            <stateChange>\n                <if>\n                    <and>\n                        <condition>\n                            <stateAttribute type=\"constant\"\n                                            value=\"test\" />\n                            <stateValue type=\"long\"\n                                        value=\"0\" />\n                        </condition>\n                        <condition>\n                            <stateAttribute type=\"constant\"\n                                            value=\"test1\" />\n                            <stateValue type=\"long\"\n                                        value=\"0\" />\n                        </condition>\n                        <condition>\n                            <stateAttribute type=\"constant\"\n                                            value=\"checkpoint\" />\n                            <stateValue type=\"long\"\n                                        value=\"1\" />\n                        </condition>\n                    </and>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"and_three_operands\" />\n                    <stateValue type=\"long\"\n                                value=\"0\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"constant\"\n                                    value=\"and_three_operands\" />\n                    <stateValue type=\"long\"\n                                value=\"1\" />\n                </else>\n            </stateChange>\n        </eventHandler>\n        <eventHandler eventName=\"*\">\n            <stateChange>\n                <if>\n                    <not>\n                        <condition>\n                            <stateAttribute type=\"constant\"\n                                            value=\"and_three_operands\" />\n                            <stateValue type=\"long\"\n                                        value=\"1\" />\n                        </condition>\n                    </not>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"not_operand\" />\n                    <stateValue type=\"long\"\n                                value=\"1\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"constant\"\n                                    value=\"not_operand\" />\n                    <stateValue type=\"long\"\n                                value=\"0\" />\n                </else>\n            </stateChange>\n        </eventHandler>\n    </stateProvider>\n</tmfxml>"
        },
        "Analyze syscalls with patternHandler, using stateChange actions to increment counters for consuming and non-consuming events, and creating segments with mappings.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <pattern version=\"0\"\n             id=\"syscall.analysis\">\n        <mappingGroup id=\"group\">\n            <entry>\n                <stateValue type=\"int\"\n                            value=\"1\" />\n                <stateValue type=\"string\"\n                            value=\"open\" />\n            </entry>\n        </mappingGroup>\n        <patternHandler>\n            <action id=\"increment_counter_consuming\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"consuming\" />\n                    <stateValue increment=\"true\"\n                                type=\"long\"\n                                value=\"1\" />\n                </stateChange>\n            </action>\n            <fsm id=\"consuming\">\n                <state id=\"start\">\n                    <transition event=\"entry\"\n                                target=\"exit_state\" />\n                </state>\n                <state id=\"exit_state\">\n                    <transition event=\"exit\"\n                                target=\"end\"\n                                action=\"increment_counter_consuming\" />\n                </state>\n                <final id=\"end\" />\n            </fsm>\n            <action id=\"increment_counter_non_consuming\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"non_consuming\" />\n                    <stateValue increment=\"true\"\n                                type=\"long\"\n                                value=\"1\" />\n                </stateChange>\n            </action>\n            <fsm id=\"non_consuming\"\n                 consuming=\"false\">\n                <state id=\"start\">\n                    <transition event=\"entry\"\n                                target=\"exit_state\" />\n                </state>\n                <state id=\"exit_state\">\n                    <transition event=\"exit\"\n                                target=\"end\"\n                                action=\"increment_counter_non_consuming\" />\n                </state>\n                <final id=\"end\" />\n            </fsm>\n            <action id=\"segment_create\">\n                <segment>\n                    <segType>\n                        <segName>\n                            <stateValue mappingGroup=\"group\"\n                                        type=\"int\"\n                                        value=\"1\" />\n                        </segName>\n                    </segType>\n                </segment>\n            </action>\n            <fsm id=\"mapping\"\n                 multiple=\"false\">\n                <state id=\"start\">\n                    <transition event=\"entry\"\n                                target=\"end\"\n                                action=\"segment_create\" />\n                </state>\n                <final id=\"end\" />\n            </fsm>\n        </patternHandler>\n    </pattern>\n</tmfxml>"
        },
        "Visualize the XML simple pattern with time graph views and XY charts, analyzing CPU entries with display type and delta.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <timeGraphView id=\"xml.core.tests.simple.pattern.timegraph\">\n        <head>\n            <analysis id=\"xml.core.tests.simple.pattern\" />\n            <label value=\"XML Simple Time Graph\" />\n        </head>\n        <!-- Control Flow View -->\n        <entry path=\"CPU\">\n            <display type=\"self\" />\n            <entry path=\"*\">\n                <display type=\"self\" />\n            </entry>\n        </entry>\n    </timeGraphView>\n    <timeGraphView id=\"xml.core.tests.simple.pattern.timegraph2\">\n        <head>\n            <analysis id=\"xml.core.tests.simple.pattern\" />\n            <label value=\"XML Simple Time Graph 2\" />\n        </head>\n        <!-- Control Flow View -->\n        <entry path=\"CPU\">\n            <entry path=\"*\">\n                <display type=\"self\" />\n            </entry>\n        </entry>\n    </timeGraphView>\n    <xyView id=\"xml.core.tests.simple.pattern.xy\">\n        <head>\n            <analysis id=\"xml.core.tests.simple.pattern\" />\n            <label value=\"XML Simple XY chart\" />\n        </head>\n        <entry path=\"CPU/*\">\n            <display type=\"self\" />\n        </entry>\n    </xyView>\n    <xyView id=\"xml.core.tests.simple.pattern.xy.delta\">\n        <head>\n            <analysis id=\"xml.core.tests.simple.pattern\" />\n            <label value=\"XML Simple XY chart with delta\" />\n        </head>\n        <entry path=\"CPU/*\"\n               displayType=\"delta\">\n            <display type=\"self\" />\n        </entry>\n    </xyView>\n</tmfxml>"
        },
        "For the event 'x', store the value of 'testField' as a double type in the XML state provider 'test.xml.doubles'.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <stateProvider id=\"test.xml.doubles\"\n                   version=\"1\">\n        <eventHandler eventName=\"x\">\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"testField\" />\n                <stateValue type=\"eventField\"\n                            forcedType=\"double\"\n                            value=\"testField\" />\n            </stateChange>\n        </eventHandler>\n    </stateProvider>\n</tmfxml>"
        },
        "For the experiment analysis 'test.xml.experiment.stateprovider', create a time graph view showing updates for each CPU. Define 'Good' and 'Bad' states with specific colors.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <timeGraphView id=\"test.xml.experiment.timegraph\">\n        <head>\n            <analysis id=\"test.xml.experiment.stateprovider\" />\n            <label value=\"Test XML Experiment view\" />\n        </head>\n        <!-- Test string value for colors for this analysis -->\n        <definedValue name=\"Good\"\n                      value=\"GOOD\"\n                      color=\"#118811\" />\n        <definedValue name=\"Bad\"\n                      value=\"BAD\"\n                      color=\"#DDDD00\" />\n        <entry path=\"update/*\">\n            <display type=\"self\" />\n        </entry>\n    </timeGraphView>\n    <stateProvider id=\"test.xml.experiment.stateprovider\"\n                   version=\"1\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.tmf.core.experiment.generic\" />\n            <label value=\"Xml Analysis for experiments only\" />\n        </head>\n        <mappingGroup id=\"operation\">\n            <entry>\n                <stateValue type=\"string\"\n                            value=\"read only\" />\n                <stateValue type=\"string\"\n                            value=\"op1\" />\n            </entry>\n        </mappingGroup>\n        <!-- Test to see that state values are updated or modified depending on the requested state change -->\n        <eventHandler eventName=\"entry\">\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"update\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"cpu\" />\n                <stateValue type=\"string\"\n                            value=\"UNKNOWN\" />\n            </stateChange>\n        </eventHandler>\n        <eventHandler eventName=\"exit\">\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"update\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"cpu\" />\n                <stateValue type=\"eventField\"\n                            value=\"curState\"\n                            update=\"true\" />\n            </stateChange>\n        </eventHandler>\n    </stateProvider>\n</tmfxml>"
        },
        "Analyze the 'test.analysis.1' pattern to check if 'curState' equals 'GOOD' and increment counters for fsm1, fsm2, and fsm3 based on transitions.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <pattern version=\"0\"\n             id=\"test.analysis.1\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.tmf.core.tests.xmlstub\" />\n            <label value=\"XML test analysis 1\" />\n        </head>\n        <patternHandler>\n            <!-- This condition check if the current running thread PID is 496 -->\n            <test id=\"curState\">\n                <if>\n                    <condition>\n                        <field name=\"curState\" />\n                        <stateValue type=\"string\"\n                                    value=\"GOOD\" />\n                    </condition>\n                </if>\n            </test>\n            <action id=\"increment_fsm1_counter\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"fsm1\" />\n                    <stateValue type=\"long\"\n                                value=\"1\"\n                                increment=\"true\" />\n                </stateChange>\n            </action>\n            <action id=\"increment_fsm2_counter\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"fsm2\" />\n                    <stateValue type=\"long\"\n                                value=\"1\"\n                                increment=\"true\" />\n                </stateChange>\n            </action>\n            <action id=\"increment_fsm3_counter\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"fsm3\" />\n                    <stateValue type=\"long\"\n                                value=\"1\"\n                                increment=\"true\" />\n                </stateChange>\n            </action>\n            <fsm id=\"fsm1\">\n                <initial>\n                    <transition cond=\"curState\"\n                                target=\"state1\" />\n                </initial>\n                <state id=\"state1\">\n                    <transition event=\"exit\"\n                                target=\"end\"\n                                action=\"increment_fsm1_counter\" />\n                </state>\n                <final id=\"end\" />\n            </fsm>\n            <fsm id=\"fsm2\">\n                <initialState>\n                    <transition event=\"exit\"\n                                target=\"end\"\n                                action=\"increment_fsm2_counter\" />\n                </initialState>\n                <final id=\"end\" />\n            </fsm>\n            <fsm id=\"fsm3\">\n                <initialState>\n                    <transition event=\"exit\"\n                                cond=\"curState\"\n                                target=\"end\"\n                                action=\"increment_fsm3_counter\" />\n                </initialState>\n                <final id=\"end\" />\n            </fsm>\n        </patternHandler>\n    </pattern>\n</tmfxml>"
        },
        "Analyze the 'test.analysis.2' pattern, check if 'curState' equals 'BAD', increment counters 'count_new' and 'precond', and generate segments 'OLD' and 'NEW'.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <pattern version=\"0\"\n             id=\"test.analysis.2\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.tmf.core.tests.xmlstub\" />\n            <label value=\"XML test analysis 2\" />\n        </head>\n        <patternHandler>\n            <test id=\"curStateBad\">\n                <if>\n                    <condition>\n                        <field name=\"curState\" />\n                        <stateValue type=\"string\"\n                                    value=\"BAD\" />\n                    </condition>\n                </if>\n            </test>\n            <action id=\"increment_counter_new\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"count_new\" />\n                    <stateValue type=\"int\"\n                                value=\"1\"\n                                increment=\"true\" />\n                </stateChange>\n            </action>\n            <action id=\"increment_counter_precond\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"precond\" />\n                    <stateValue type=\"int\"\n                                value=\"1\"\n                                increment=\"true\" />\n                </stateChange>\n            </action>\n            <action id=\"generate_old_segment\">\n                <segment>\n                    <segType segName=\"OLD\" />\n                </segment>\n            </action>\n            <action id=\"generate_new_segment\">\n                <segment>\n                    <segType segName=\"NEW\" />\n                </segment>\n            </action>\n            <fsm id=\"test\"\n                 initial=\"state_old\"\n                 multiple=\"false\">\n                <initial>\n                    <transition target=\"state_old\" />\n                </initial>\n                <initialState>\n                    <transition target=\"state_new\" />\n                </initialState>\n                <state id=\"state_old\">\n                    <transition target=\"end\"\n                                action=\"generate_old_segment\" />\n                </state>\n                <state id=\"state_new\">\n                    <transition target=\"end\"\n                                action=\"generate_new_segment\" />\n                </state>\n                <final id=\"end\" />\n            </fsm>\n            <fsm id=\"test1\"\n                 multiple=\"false\">\n                <!-- There is only one such event, so it should pass the initial state, but go no further -->\n                <precondition event=\"exit\"\n                              cond=\"curStateBad\" />\n                <initialState>\n                    <transition target=\"state_new\"\n                                action=\"increment_counter_new\" />\n                </initialState>\n                <state id=\"state_new\">\n                    <transition target=\"state_2\"\n                                action=\"increment_counter_precond\" />\n                </state>\n                <state id=\"state_2\">\n                    <transition target=\"end\"\n                                action=\"increment_counter_precond\" />\n                </state>\n                <final id=\"end\" />\n            </fsm>\n        </patternHandler>\n    </pattern>\n</tmfxml>"
        },
        "Analyze the 'xml test pattern segment', generate segments 'test1' and 'test2' with fields 'field1', 'field2', 'field3', and toggle states on 'test' and 'test1' events.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <pattern version=\"0\"\n             id=\"xml test pattern segment\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.lttng2.kernel.tracetype\" />\n            <label value=\"xml test pattern segment\" />\n        </head>\n        <!-- the pattern handler specifies the FSM that will be instanciated at the beginning of the analysis -->\n        <patternHandler initial=\"test\">\n            <!-- CONDITIONS -->\n            <!-- ACTIONS -->\n            <!-- Generate two segments -->\n            <action id=\"pattern segment test 1\">\n                <!-- Generate a pattern segment with the name 'test1' -->\n                <segment>\n                    <segType segName=\"test1\" />\n                </segment>\n            </action>\n            <action id=\"pattern segment test 2\">\n                <!-- Generate a pattern segment with the name 'test2' and with three fields 'field1', 'field2' and 'field3' -->\n                <segment>\n                    <segType segName=\"test2\" />\n                    <segContent>\n                        <segField name=\"field1\"\n                                  type=\"long\">\n                            <stateValue type=\"eventField\"\n                                        value=\"testField\" />\n                        </segField>\n                        <segField name=\"field2\"\n                                  type=\"string\"\n                                  value=\"test\" />\n                        <segField name=\"field3\"\n                                  type=\"int\"\n                                  value=\"1\" />\n                    </segContent>\n                </segment>\n            </action>\n            <!-- FSMs -->\n            <!-- test fsm\n\t\tDeclare a test FSM that will go back and forth between 2 states -->\n            <fsm id=\"test\"\n                 multiple=\"true\"\n                 initial=\"state1\">\n                <state id=\"state1\">\n                    <transition event=\"test\"\n                                target=\"state2\"\n                                action=\"pattern segment test 1\" />\n                </state>\n                <state id=\"state2\">\n                    <transition event=\"test1\"\n                                target=\"state1\"\n                                action=\"pattern segment test 2\" />\n                </state>\n            </fsm>\n        </patternHandler>\n    </pattern>\n</tmfxml>"
        },
        "Create a segment named 'seg1' with start time from 'timestamp' and end time from 'testField', and transition from 'start' to 'end' state on any event.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <pattern version=\"0\"\n             id=\"test.seg.duration\">\n        <head>\n            <label value=\"analysis name\" />\n        </head>\n        <patternHandler>\n            <action id=\"segment_create\">\n                <segment>\n                    <segType>\n                        <segName>\n                            <stateValue type=\"string\"\n                                        value=\"seg1\" />\n                        </segName>\n                    </segType>\n                    <segTime>\n                        <begin type=\"eventField\"\n                               value=\"timestamp\" />\n                        <end type=\"eventField\"\n                             value=\"testField\" />\n                    </segTime>\n                </segment>\n            </action>\n            <fsm id=\"test\"\n                 multiple=\"true\">\n                <state id=\"start\">\n                    <transition event=\"*\"\n                                target=\"end\"\n                                action=\"segment_create\" />\n                </state>\n                <final id=\"end\" />\n            </fsm>\n        </patternHandler>\n    </pattern>\n</tmfxml>"
        },
        "Display the 'Test XML Attributes view' with updates and modifications on 'cpu', handling various state changes, future time calculations, and conditional operations on events like 'entry' and 'exit'.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <timeGraphView id=\"org.eclipse.linuxtools.tmf.analysis.xml.ui.views.statesystem\">\n        <head>\n            <analysis id=\"test.xml.attributes\" />\n            <label value=\"Test XML Attributes view\" />\n        </head>\n        <!-- Test string value for colors for this analysis -->\n        <definedValue name=\"Good\"\n                      value=\"GOOD\"\n                      color=\"#118811\" />\n        <definedValue name=\"Bad\"\n                      value=\"BAD\"\n                      color=\"#DDDD00\" />\n        <entry path=\"update/*\">\n            <display type=\"self\" />\n        </entry>\n    </timeGraphView>\n    <stateProvider id=\"test.xml.attributes\"\n                   version=\"1\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.tmf.core.tests.xmlstub\" />\n            <label value=\"Xml State Values test\" />\n        </head>\n        <mappingGroup id=\"operation\">\n            <entry>\n                <stateValue type=\"string\"\n                            value=\"read only\" />\n                <stateValue type=\"string\"\n                            value=\"op1\" />\n            </entry>\n        </mappingGroup>\n        <!-- Test to see that state values are updated or modified depending on the requested state change -->\n        <eventHandler eventName=\"entry\">\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"update\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"cpu\" />\n                <stateValue type=\"string\"\n                            value=\"UNKNOWN\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"modify\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"cpu\" />\n                <stateValue type=\"string\"\n                            value=\"UNKNOWN\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"hostID\" />\n                <stateValue type=\"eventField\"\n                            value=\"hostID\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"stack\" />\n                <stateValue stack=\"push\"\n                            type=\"eventField\"\n                            value=\"timestamp\" />\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <field name=\"op\" />\n                        <stateValue mappingGroup=\"operation\"\n                                    type=\"string\"\n                                    value=\"read only\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"mapped\" />\n                    <stateValue type=\"string\"\n                                value=\"TRUE\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"constant\"\n                                    value=\"mapped\" />\n                    <stateValue type=\"string\"\n                                value=\"FALSE\" />\n                </else>\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"script\" />\n                <stateValue type=\"script\"\n                            value=\"op == 'op1' ? 'TRUE' : 'FALSE'\"\n                            scriptEngine=\"rhino\">\n                    <stateValue id=\"op\"\n                                type=\"eventField\"\n                                value=\"op\" />\n                </stateValue>\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"future\" />\n                <stateValue type=\"int\"\n                            value=\"100\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"future\" />\n                <stateValue type=\"int\"\n                            value=\"101\" />\n                <futureTime type=\"script\"\n                            value=\"ts + 2\"\n                            scriptEngine=\"rhino\">\n                    <stateValue id=\"ts\"\n                                type=\"eventField\"\n                                value=\"timestamp\" />\n                </futureTime>\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"futureStr\" />\n                <stateValue type=\"int\"\n                            value=\"100\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"futureStr\" />\n                <stateValue type=\"int\"\n                            value=\"101\" />\n                <futureTime type=\"script\"\n                            value=\"ts + 2\"\n                            scriptEngine=\"rhino\"\n                            forcedType=\"string\">\n                    <stateValue id=\"ts\"\n                                type=\"eventField\"\n                                value=\"timestamp\" />\n                </futureTime>\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"futureStack\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"cpu\" />\n                <stateValue type=\"eventField\"\n                            value=\"op\"\n                            stack=\"push\" />\n                <futureTime type=\"script\"\n                            value=\"ts + 1\"\n                            scriptEngine=\"rhino\">\n                    <stateValue id=\"ts\"\n                                type=\"eventField\"\n                                value=\"timestamp\" />\n                </futureTime>\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"futureStack\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"cpu\" />\n                <stateValue type=\"eventField\"\n                            value=\"op\"\n                            stack=\"pop\" />\n                <futureTime type=\"script\"\n                            value=\"ts + 6\"\n                            scriptEngine=\"rhino\">\n                    <stateValue id=\"ts\"\n                                type=\"eventField\"\n                                value=\"timestamp\" />\n                </futureTime>\n            </stateChange>\n        </eventHandler>\n        <eventHandler eventName=\"exit\">\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"update\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"cpu\" />\n                <stateValue type=\"eventField\"\n                            value=\"curState\"\n                            update=\"true\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"update\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"cpu\" />\n                <stateValue type=\"null\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"modify\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"cpu\" />\n                <stateValue type=\"eventField\"\n                            value=\"curState\" />\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateValue type=\"long\"\n                                    stack=\"peek\">\n                            <stateAttribute type=\"constant\"\n                                            value=\"stack\" />\n                        </stateValue>\n                        <stateValue type=\"long\"\n                                    value=\"5\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"stack\" />\n                    <stateValue stack=\"pop\"\n                                type=\"null\" />\n                </then>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <field name=\"op\" />\n                        <stateValue type=\"string\"\n                                    value=\"read only\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"mapped\" />\n                    <stateValue type=\"string\"\n                                value=\"TRUE\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"constant\"\n                                    value=\"mapped\" />\n                    <stateValue type=\"string\"\n                                value=\"FALSE\" />\n                </else>\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"script\" />\n                <stateValue type=\"script\"\n                            value=\"op == 'op1' ? 'FALSE' : 'TRUE'\"\n                            scriptEngine=\"rhino\">\n                    <stateValue id=\"op\"\n                                type=\"eventField\"\n                                value=\"op\" />\n                </stateValue>\n            </stateChange>\n        </eventHandler>\n    </stateProvider>\n</tmfxml>"
        },
        "Test the state values in an FSM scenario. Handle events like 'entry', 'exit', and 'action', saving 'op' in an attribute pool and checking 'cpu' state in the process.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <!-- This file will test state values in the context of an fsm -->\n    <pattern version=\"0\"\n             id=\"org.eclipse.tracecompass.xml.tests.statevaluescenarios\">\n        <patternHandler initial=\"test\">\n            <test id=\"cpu\">\n                <if>\n                    <condition>\n                        <stateValue type=\"query\">\n                            <stateAttribute type=\"constant\"\n                                            value=\"#CurrentScenario\" />\n                            <stateAttribute type=\"constant\"\n                                            value=\"cpu\" />\n                        </stateValue>\n                        <stateValue type=\"eventField\"\n                                    value=\"cpu\" />\n                    </condition>\n                </if>\n            </test>\n            <!-- ACTIONS -->\n            <!-- Save a value in an attribute pool -->\n            <action id=\"save_pool\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Operations\" />\n                    <stateAttribute type=\"pool\" />\n                    <stateValue type=\"eventField\"\n                                value=\"op\" />\n                </stateChange>\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"#CurrentScenario\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"cpu\" />\n                    <stateValue type=\"eventField\"\n                                value=\"cpu\" />\n                </stateChange>\n            </action>\n            <!-- A different action, to test that the attribute pool is shared in a same analysis -->\n            <action id=\"save_pool2\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Operations\" />\n                    <stateAttribute type=\"pool\" />\n                    <stateValue type=\"eventField\"\n                                value=\"op\" />\n                </stateChange>\n            </action>\n            <!-- FSMs -->\n            <!-- test fsm\n\t\t\tDeclare a test FSM that that will generate two segments for each event received -->\n            <fsm id=\"test\"\n                 initial=\"wait_entry\">\n                <state id=\"wait_entry\">\n                    <transition event=\"entry\"\n                                target=\"in_scenario\"\n                                action=\"save_pool\" />\n                </state>\n                <state id=\"in_scenario\">\n                    <transition cond=\"cpu\"\n                                event=\"exit\"\n                                target=\"end\" />\n                    <transition cond=\"cpu\"\n                                event=\"action\"\n                                target=\"in_scenario\"\n                                action=\"save_pool2\" />\n                </state>\n                <final id=\"end\" />\n            </fsm>\n        </patternHandler>\n    </pattern>\n</tmfxml>"
        },
        "Analyze kernel Linux state system with events like 'exit_syscall', 'irq_handler_entry', and 'sched_switch', updating status of CPUs and threads accordingly.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <timeGraphView id=\"org.eclipse.linuxtools.tmf.analysis.xml.ui.views.statesystem\">\n        <head>\n            <analysis id=\"kernel.linux.sp\" />\n            <label value=\"Xml Sample Kernel View\" />\n        </head>\n        <!-- StateValues -->\n        <definedValue name=\"PROCESS_STATUS_UNKNOWN\"\n                      value=\"0\"\n                      color=\"#EEEEEE\" />\n        <definedValue name=\"PROCESS_STATUS_WAIT_BLOCKED\"\n                      value=\"1\"\n                      color=\"#CCCCCC\" />\n        <definedValue name=\"PROCESS_STATUS_RUN_USERMODE\"\n                      value=\"2\"\n                      color=\"#118811\" />\n        <definedValue name=\"PROCESS_STATUS_RUN_SYSCALL\"\n                      value=\"3\"\n                      color=\"#0000EE\" />\n        <definedValue name=\"PROCESS_STATUS_INTERRUPTED\"\n                      value=\"4\"\n                      color=\"#DDDD00\" />\n        <definedValue name=\"PROCESS_STATUS_WAIT_FOR_CPU\"\n                      value=\"5\"\n                      color=\"#AA0000\" />\n        <!-- Control Flow View -->\n        <entry path=\"CPUs/*\">\n            <display type=\"constant\"\n                     value=\"Status\" />\n            <parent type=\"constant\"\n                    value=\"PPID\" />\n            <name type=\"constant\"\n                  value=\"Exec_name\" />\n        </entry>\n        <entry path=\"Threads\">\n            <display type=\"self\" />\n            <entry path=\"*\">\n                <display type=\"constant\"\n                         value=\"Status\" />\n                <parent type=\"constant\"\n                        value=\"PPID\" />\n                <name type=\"constant\"\n                      value=\"Exec_name\" />\n            </entry>\n        </entry>\n    </timeGraphView>\n    <xyView id=\"org.eclipse.linuxtools.tmf.analysis.xml.core.tests.xy\">\n        <head>\n            <analysis id=\"kernel.linux.sp\" />\n        </head>\n        <entry path=\"CPUs/*\">\n            <display type=\"constant\"\n                     value=\"Status\" />\n            <name type=\"self\" />\n        </entry>\n    </xyView>\n    <stateProvider id=\"kernel.linux.sp\"\n                   version=\"1\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.lttng2.kernel.tracetype\" />\n            <label value=\"Xml kernel State System\" />\n        </head>\n        <!-- StateValues -->\n        <definedValue name=\"CPU_STATUS_IDLE\"\n                      value=\"0\" />\n        <definedValue name=\"CPU_STATUS_RUN_USERMODE\"\n                      value=\"1\" />\n        <definedValue name=\"CPU_STATUS_RUN_SYSCALL\"\n                      value=\"2\" />\n        <definedValue name=\"CPU_STATUS_IRQ\"\n                      value=\"3\" />\n        <definedValue name=\"CPU_STATUS_SOFTIRQ\"\n                      value=\"4\" />\n        <definedValue name=\"PROCESS_STATUS_UNKNOWN\"\n                      value=\"0\" />\n        <definedValue name=\"PROCESS_STATUS_WAIT_BLOCKED\"\n                      value=\"1\" />\n        <definedValue name=\"PROCESS_STATUS_RUN_USERMODE\"\n                      value=\"2\" />\n        <definedValue name=\"PROCESS_STATUS_RUN_SYSCALL\"\n                      value=\"3\" />\n        <definedValue name=\"PROCESS_STATUS_INTERRUPTED\"\n                      value=\"4\" />\n        <definedValue name=\"PROCESS_STATUS_WAIT_FOR_CPU\"\n                      value=\"5\" />\n        <definedValue name=\"SOFT_IRQ_RAISED\"\n                      value=\"-2\" />\n        <!-- Shortcut Variables -->\n        <location id=\"CurrentThread\">\n            <stateAttribute type=\"constant\"\n                            value=\"Threads\" />\n            <stateAttribute type=\"query\">\n                <stateAttribute type=\"constant\"\n                                value=\"CPUs\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"cpu\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Current_thread\" />\n            </stateAttribute>\n        </location>\n        <location id=\"CurrentCPU\">\n            <stateAttribute type=\"constant\"\n                            value=\"CPUs\" />\n            <stateAttribute type=\"eventField\"\n                            value=\"cpu\" />\n        </location>\n        <location id=\"CurrentIRQ\">\n            <stateAttribute type=\"constant\"\n                            value=\"Resources\" />\n            <stateAttribute type=\"constant\"\n                            value=\"IRQs\" />\n            <stateAttribute type=\"eventField\"\n                            value=\"irq\" />\n        </location>\n        <location id=\"CurrentSoftIRQ\">\n            <stateAttribute type=\"constant\"\n                            value=\"Resources\" />\n            <stateAttribute type=\"constant\"\n                            value=\"Soft_IRQs\" />\n            <stateAttribute type=\"eventField\"\n                            value=\"vec\" />\n        </location>\n        <location id=\"newCurrentThread\">\n            <stateAttribute type=\"constant\"\n                            value=\"Threads\" />\n            <stateAttribute type=\"eventField\"\n                            value=\"next_tid\" />\n        </location>\n        <!-- case 1 : exit_syscall : Fields: int64 ret -->\n        <eventHandler eventName=\"exit_syscall\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentThread\" />\n                <stateAttribute type=\"constant\"\n                                value=\"System_call\" />\n                <stateValue type=\"null\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentThread\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Status\" />\n                <stateValue type=\"int\"\n                            value=\"$PROCESS_STATUS_RUN_USERMODE\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentCPU\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Status\" />\n                <stateValue type=\"int\"\n                            value=\"$CPU_STATUS_RUN_USERMODE\" />\n            </stateChange>\n        </eventHandler>\n        <!-- case 2 : irq_handler_entry : Fields: int32 irq, string name -->\n        <eventHandler eventName=\"irq_handler_entry\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentIRQ\" />\n                <stateValue type=\"eventField\"\n                            value=\"cpu\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentThread\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Status\" />\n                <stateValue type=\"int\"\n                            value=\"$PROCESS_STATUS_INTERRUPTED\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentCPU\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Status\" />\n                <stateValue type=\"int\"\n                            value=\"$CPU_STATUS_IRQ\" />\n            </stateChange>\n        </eventHandler>\n        <!-- case 3 : irq_handler_exit : Fields: int32 irq, int32 ret -->\n        <eventHandler eventName=\"irq_handler_exit\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentIRQ\" />\n                <stateValue type=\"null\" />\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentThread\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"System_call\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentThread\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_RUN_USERMODE\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentThread\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_RUN_SYSCALL\" />\n                </else>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentThread\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"System_call\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentCPU\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$CPU_STATUS_RUN_USERMODE\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentCPU\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$CPU_STATUS_RUN_SYSCALL\" />\n                </else>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Current_thread\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentCPU\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$CPU_STATUS_IDLE\" />\n                </then>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Current_thread\" />\n                        <stateValue type=\"int\"\n                                    value=\"0\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentCPU\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$CPU_STATUS_IDLE\" />\n                </then>\n            </stateChange>\n        </eventHandler>\n        <!-- case 4 : softirq_entry : Fields: int32 vec -->\n        <eventHandler eventName=\"softirq_entry\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentSoftIRQ\" />\n                <stateValue type=\"eventField\"\n                            value=\"cpu\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentThread\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Status\" />\n                <stateValue type=\"int\"\n                            value=\"$PROCESS_STATUS_INTERRUPTED\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentCPU\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Status\" />\n                <stateValue type=\"int\"\n                            value=\"$CPU_STATUS_SOFTIRQ\" />\n            </stateChange>\n        </eventHandler>\n        <!-- case 5 : softirq_exit : Fields: int32 vec -->\n        <eventHandler eventName=\"softirq_exit\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentSoftIRQ\" />\n                <stateValue type=\"null\" />\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentThread\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"System_call\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentThread\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_RUN_USERMODE\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentThread\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_RUN_SYSCALL\" />\n                </else>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentThread\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"System_call\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentCPU\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$CPU_STATUS_RUN_USERMODE\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentCPU\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$CPU_STATUS_RUN_SYSCALL\" />\n                </else>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Current_thread\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentCPU\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$CPU_STATUS_IDLE\" />\n                </then>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Current_thread\" />\n                        <stateValue type=\"int\"\n                                    value=\"0\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentCPU\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$CPU_STATUS_IDLE\" />\n                </then>\n            </stateChange>\n        </eventHandler>\n        <!-- case 6 : softirq_raise : Fields: int32 vec -->\n        <eventHandler eventName=\"softirq_raise\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentSoftIRQ\" />\n                <stateValue type=\"int\"\n                            value=\"$SOFT_IRQ_RAISED\" />\n            </stateChange>\n        </eventHandler>\n        <!-- case 7 : sched_switch : Fields: string prev_comm, int32 prev_tid,\n            int32 prev_prio, int64 prev_state, string next_comm, int32 next_tid, int32\n            next_prio -->\n        <eventHandler eventName=\"sched_switch\">\n            <stateChange>\n                <if>\n                    <condition>\n                        <field name=\"prev_state\" />\n                        <stateValue type=\"long\"\n                                    value=\"0\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"prev_tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_WAIT_FOR_CPU\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"prev_tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_WAIT_BLOCKED\" />\n                </else>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"location\"\n                                        value=\"newCurrentThread\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"System_call\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"newCurrentThread\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_RUN_USERMODE\" />\n                </then>\n                <else>\n                    <stateAttribute type=\"location\"\n                                    value=\"newCurrentThread\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_RUN_SYSCALL\" />\n                </else>\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"newCurrentThread\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Exec_name\" />\n                <stateValue type=\"eventField\"\n                            value=\"next_comm\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentCPU\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Current_thread\" />\n                <stateValue type=\"eventField\"\n                            value=\"next_tid\"\n                            forcedType=\"int\" />\n            </stateChange>\n            <stateChange>\n                <if>\n                    <not>\n                        <condition>\n                            <field name=\"next_tid\" />\n                            <stateValue type=\"long\"\n                                        value=\"0\" />\n                        </condition>\n                    </not>\n                </if>\n                <then>\n                    <if>\n                        <condition>\n                            <stateAttribute type=\"location\"\n                                            value=\"newCurrentThread\" />\n                            <stateAttribute type=\"constant\"\n                                            value=\"System_call\" />\n                            <stateValue type=\"null\" />\n                        </condition>\n                    </if>\n                    <then>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Status\" />\n                        <stateValue type=\"int\"\n                                    value=\"$CPU_STATUS_RUN_USERMODE\" />\n                    </then>\n                    <else>\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Status\" />\n                        <stateValue type=\"int\"\n                                    value=\"$CPU_STATUS_RUN_SYSCALL\" />\n                    </else>\n                </then>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <field name=\"next_tid\" />\n                        <stateValue type=\"long\"\n                                    value=\"0\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentCPU\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$CPU_STATUS_IDLE\" />\n                </then>\n            </stateChange>\n        </eventHandler>\n        <!-- case 8 : sched_process_fork : Fields: string parent_comm, int32 parent_tid,\n            string child_comm, int32 child_tid -->\n        <eventHandler eventName=\"sched_process_fork\">\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"Threads\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"child_tid\" />\n                <stateAttribute type=\"constant\"\n                                value=\"PPID\" />\n                <stateValue type=\"eventField\"\n                            value=\"parent_tid\"\n                            forcedType=\"int\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"Threads\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"child_tid\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Exec_name\" />\n                <stateValue type=\"eventField\"\n                            value=\"child_comm\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"Threads\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"child_tid\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Status\" />\n                <stateValue type=\"int\"\n                            value=\"$PROCESS_STATUS_WAIT_FOR_CPU\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"Threads\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"child_tid\" />\n                <stateAttribute type=\"constant\"\n                                value=\"System_call\" />\n                <stateValue type=\"query\">\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"parent_tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"System_call\" />\n                </stateValue>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"constant\"\n                                        value=\"Threads\" />\n                        <stateAttribute type=\"eventField\"\n                                        value=\"child_tid\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"System_call\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"child_tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"System_call\" />\n                    <stateValue type=\"string\"\n                                value=\"sys_clone\" />\n                </then>\n            </stateChange>\n        </eventHandler>\n        <!-- case 10 : sched_process_free : Fields: string parent_comm, int32 parent_tid,\n            string child_comm, int32 child_tid -->\n        <eventHandler eventName=\"sched_process_free\">\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"Threads\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"tid\" />\n                <stateValue type=\"delete\" />\n            </stateChange>\n        </eventHandler>\n        <!-- case 11 : lttng_statedump_process_state : Fields: int32 type, int32\n            mode, int32 pid, int32 submode, int32 vpid, int32 ppid, int32 tid, string\n            name, int32 status, int32 vtid -->\n        <eventHandler eventName=\"lttng_statedump_process_state\">\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"constant\"\n                                        value=\"Threads\" />\n                        <stateAttribute type=\"eventField\"\n                                        value=\"tid\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Exec_name\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Exec_name\" />\n                    <stateValue type=\"eventField\"\n                                value=\"name\" />\n                </then>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"constant\"\n                                        value=\"Threads\" />\n                        <stateAttribute type=\"eventField\"\n                                        value=\"tid\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"PPID\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"PPID\" />\n                    <stateValue type=\"eventField\"\n                                value=\"ppid\"\n                                forcedType=\"int\" />\n                </then>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <and>\n                        <condition>\n                            <stateAttribute type=\"constant\"\n                                            value=\"Threads\" />\n                            <stateAttribute type=\"eventField\"\n                                            value=\"tid\" />\n                            <stateAttribute type=\"constant\"\n                                            value=\"Status\" />\n                            <stateValue type=\"null\" />\n                        </condition>\n                        <condition>\n                            <field name=\"status\" />\n                            <stateValue type=\"long\"\n                                        value=\"2\" />\n                        </condition>\n                    </and>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_WAIT_FOR_CPU\" />\n                </then>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <and>\n                        <condition>\n                            <stateAttribute type=\"constant\"\n                                            value=\"Threads\" />\n                            <stateAttribute type=\"eventField\"\n                                            value=\"tid\" />\n                            <stateAttribute type=\"constant\"\n                                            value=\"Status\" />\n                            <stateValue type=\"null\" />\n                        </condition>\n                        <condition>\n                            <field name=\"status\" />\n                            <stateValue type=\"long\"\n                                        value=\"5\" />\n                        </condition>\n                    </and>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_WAIT_BLOCKED\" />\n                </then>\n            </stateChange>\n            <stateChange>\n                <if>\n                    <condition>\n                        <stateAttribute type=\"constant\"\n                                        value=\"Threads\" />\n                        <stateAttribute type=\"eventField\"\n                                        value=\"tid\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Status\" />\n                        <stateValue type=\"null\" />\n                    </condition>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_UNKNOWN\" />\n                </then>\n            </stateChange>\n        </eventHandler>\n        <!-- case 12 : sched_wakeup : case 13 : sched_wakeup_new : Fields (same\n            fields for both types): string comm, int32 tid, int32 prio, int32 success,\n            int32 target_cpu -->\n        <eventHandler eventName=\"sched_wakeup*\">\n            <stateChange>\n                <if>\n                    <and>\n                        <not>\n                            <condition>\n                                <stateAttribute type=\"constant\"\n                                                value=\"Threads\" />\n                                <stateAttribute type=\"eventField\"\n                                                value=\"tid\" />\n                                <stateAttribute type=\"constant\"\n                                                value=\"Status\" />\n                                <stateValue type=\"int\"\n                                            value=\"$PROCESS_STATUS_RUN_USERMODE\" />\n                            </condition>\n                        </not>\n                        <not>\n                            <condition>\n                                <stateAttribute type=\"constant\"\n                                                value=\"Threads\" />\n                                <stateAttribute type=\"eventField\"\n                                                value=\"tid\" />\n                                <stateAttribute type=\"constant\"\n                                                value=\"Status\" />\n                                <stateValue type=\"int\"\n                                            value=\"$PROCESS_STATUS_RUN_SYSCALL\" />\n                            </condition>\n                        </not>\n                    </and>\n                </if>\n                <then>\n                    <stateAttribute type=\"constant\"\n                                    value=\"Threads\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"tid\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Status\" />\n                    <stateValue type=\"int\"\n                                value=\"$PROCESS_STATUS_WAIT_FOR_CPU\" />\n                </then>\n            </stateChange>\n        </eventHandler>\n        <!-- delfault : syscall -->\n        <eventHandler eventName=\"sys_*\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentThread\" />\n                <stateAttribute type=\"constant\"\n                                value=\"System_call\" />\n                <stateValue type=\"eventName\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentThread\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Status\" />\n                <stateValue type=\"int\"\n                            value=\"$PROCESS_STATUS_RUN_SYSCALL\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentCPU\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Status\" />\n                <stateValue type=\"int\"\n                            value=\"$CPU_STATUS_RUN_SYSCALL\" />\n            </stateChange>\n        </eventHandler>\n        <!-- delfault : compat_syscall -->\n        <eventHandler eventName=\"compat_sys_*\">\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentThread\" />\n                <stateAttribute type=\"constant\"\n                                value=\"System_call\" />\n                <stateValue type=\"eventName\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentThread\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Status\" />\n                <stateValue type=\"int\"\n                            value=\"$PROCESS_STATUS_RUN_SYSCALL\" />\n            </stateChange>\n            <stateChange>\n                <stateAttribute type=\"location\"\n                                value=\"CurrentCPU\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Status\" />\n                <stateValue type=\"int\"\n                            value=\"$CPU_STATUS_RUN_SYSCALL\" />\n            </stateChange>\n        </eventHandler>\n    </stateProvider>\n</tmfxml>"
        },
        "Analyze KVM exit reasons and generate XY chart for exit reasons with extended elements and sub-elements.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <my id=\"extended.my\"\n        name=\"extended element 1\">\n        <mySubElement>Test</mySubElement>\n        <mySubElement>Test2</mySubElement>\n    </my>\n    <xyView id=\"kernel.kvm.exit.xychart\">\n        <head>\n            <analysis id=\"kernel.kvm.exit.sp\" />\n            <label value=\"Exit reasons\" />\n        </head>\n        <entry path=\"Reasons/*\"\n               displayType=\"delta\">\n            <display type=\"self\" />\n        </entry>\n    </xyView>\n    <abc id=\"extended.abc\"\n         name=\"extended element abc\">\n        <mySubElement>Test</mySubElement>\n        <mySubElement>Test2</mySubElement>\n    </abc>\n    <stateProvider id=\"kernel.kvm.exit.sp\"\n                   version=\"1\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.lttng2.kernel.tracetype\" />\n            <label value=\"KVM exit reasons\" />\n        </head>\n        <!-- case 1 : exit_syscall : Fields: int64 ret -->\n        <eventHandler eventName=\"kvm_exit\">\n            <stateChange>\n                <stateAttribute type=\"constant\"\n                                value=\"Reasons\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"exit_reason\" />\n                <stateValue type=\"int\"\n                            value=\"1\"\n                            increment=\"true\" />\n            </stateChange>\n        </eventHandler>\n    </stateProvider>\n</tmfxml>"
        },
        "Analyze system call pattern for thread PID 8998, generate pattern segments, and update current thread on sched_switch events.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <pattern version=\"0\"\n             id=\"syscall.analysis\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.lttng2.kernel.tracetype\" />\n            <label value=\"XML system call analysis\" />\n        </head>\n        <!-- STORED FIELDS -->\n        <storedField id=\"filename\" />\n        <storedField id=\"fd\" />\n        <storedField id=\"ret\"\n                     alias=\"ret\" />\n        <storedField id=\"flags\"\n                     alias=\"flags\" />\n        <storedField id=\"offset\"\n                     alias=\"offset\" />\n        <storedField id=\"fd_in\"\n                     alias=\"fd_in\" />\n        <storedField id=\"fd_out\"\n                     alias=\"fd_out\" />\n        <storedField id=\"uservaddr\"\n                     alias=\"uservaddr\" />\n        <storedField id=\"upeer_sockaddr\"\n                     alias=\"upeer_sockaddr\" />\n        <!-- SHORTCUTS -->\n        <!-- Shorcut for the current running thread attribute -->\n        <location id=\"CurrentThread\">\n            <stateAttribute type=\"constant\"\n                            value=\"Threads\" />\n            <stateAttribute type=\"query\">\n                <stateAttribute type=\"constant\"\n                                value=\"CPUs\" />\n                <stateAttribute type=\"eventField\"\n                                value=\"cpu\" />\n                <stateAttribute type=\"constant\"\n                                value=\"Current_thread\" />\n            </stateAttribute>\n        </location>\n        <!-- Shorcut for the current CPU attribute -->\n        <location id=\"CurrentCPU\">\n            <stateAttribute type=\"constant\"\n                            value=\"CPUs\" />\n            <stateAttribute type=\"eventField\"\n                            value=\"cpu\" />\n        </location>\n        <!-- The attribute initial specifies the FSMs that will be instanciated at the beginning of the analysis -->\n        <patternHandler initial=\"sched_switch:syscall\">\n            <!-- CONDITIONS -->\n            <!-- This condition check if the current running thread PID is 1311 -->\n            <test id=\"tid_8998\">\n                <if>\n                    <condition>\n                        <stateValue type=\"query\">\n                            <stateAttribute type=\"location\"\n                                            value=\"CurrentCPU\" />\n                            <stateAttribute type=\"constant\"\n                                            value=\"Current_thread\" />\n                        </stateValue>\n                        <stateValue type=\"long\"\n                                    value=\"8998\" />\n                    </condition>\n                </if>\n            </test>\n            <!-- Test this : if ( !(1 ns < ts < 3 ns) || ((ts -state.syscall_entry_x.ts) < 3 ns) ) -->\n            <test id=\"time_condition\">\n                <if>\n                    <or>\n                        <not>\n                            <condition>\n                                <timerange unit=\"ns\">\n                                    <in begin=\"1\"\n                                        end=\"3\" />\n                                </timerange>\n                            </condition>\n                        </not>\n                        <condition>\n                            <elapsedTime unit=\"ns\">\n                                <less since=\"syscall_entry_x\"\n                                      value=\"3\" />\n                            </elapsedTime>\n                        </condition>\n                    </or>\n                </if>\n            </test>\n            <!-- Test if the current running thread PID is equal to the current scenario thread -->\n            <test id=\"thread_thread\">\n                <if>\n                    <condition>\n                        <stateValue type=\"query\">\n                            <stateAttribute type=\"location\"\n                                            value=\"CurrentCPU\" />\n                            <stateAttribute type=\"constant\"\n                                            value=\"Current_thread\" />\n                        </stateValue>\n                        <stateValue type=\"query\">\n                            <stateAttribute type=\"constant\"\n                                            value=\"#CurrentScenario\" />\n                            <stateAttribute type=\"constant\"\n                                            value=\"thread\" />\n                        </stateValue>\n                    </condition>\n                </if>\n            </test>\n            <!-- ACTIONS -->\n            <!-- Generates three state changes in the state system -->\n            <action id=\"sys_x_founded\">\n                <!-- Save the name of the system call executed under the current scenario path -->\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"#CurrentScenario\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"syscall\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"name\" />\n                    <stateValue type=\"eventName\" />\n                </stateChange>\n                <!-- Save the value of the CPU under the current scenario path -->\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"#CurrentScenario\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"cpu\" />\n                    <stateValue type=\"eventField\"\n                                value=\"cpu\" />\n                </stateChange>\n                <!-- Save the value of the current thread PID under the current scenario path -->\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"#CurrentScenario\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"thread\" />\n                    <stateValue type=\"query\">\n                        <stateAttribute type=\"location\"\n                                        value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"Current_thread\" />\n                    </stateValue>\n                </stateChange>\n            </action>\n            <!-- Generate a pattern segment -->\n            <action id=\"exit_syscall_founded\">\n                <!-- Generate a pattern segment with the name of the system call  of the current scenario -->\n                <segment>\n                    <segType>\n                        <segName>\n                            <stateValue type=\"query\">\n                                <stateAttribute type=\"constant\"\n                                                value=\"#CurrentScenario\" />\n                                <stateAttribute type=\"constant\"\n                                                value=\"syscall\" />\n                                <stateAttribute type=\"constant\"\n                                                value=\"name\" />\n                            </stateValue>\n                        </segName>\n                    </segType>\n                </segment>\n            </action>\n            <!-- FSMs -->\n            <!-- System call FSM\n\t\tDeclare an FSM to match all the system calls on thread 1311.\n\t\tThe FSM will generate pattern segments that will represent the system calls found -->\n            <fsm id=\"syscall\"\n                 initial=\"wait_syscall_entry_x\">\n                <!-- Validate that PID == 1311 before going to the initial state -->\n                <initial>\n                    <transition cond=\"tid_8998\"\n                                target=\"wait_syscall_entry_x\" />\n                </initial>\n                <state id=\"wait_syscall_entry_x\">\n                    <!-- The state will stay here until we have a \"syscall_entry_*\" event -->\n                    <transition event=\"sys_*\"\n                                target=\"syscall_entry_x\"\n                                action=\"sys_x_founded\"\n                                saveStoredFields=\"true\" />\n                </state>\n                <state id=\"syscall_entry_x\">\n                    <!-- The state will stay here until we have a \"syscall_exit_*\" event -->\n                    <transition event=\"exit_syscall\"\n                                cond=\"thread_thread\"\n                                target=\"syscall_exit_x\"\n                                action=\"exit_syscall_founded\"\n                                saveStoredFields=\"true\"\n                                clearStoredFields=\"true\" />\n                </state>\n                <!-- The state will stay here forever -->\n                <final id=\"syscall_exit_x\" />\n            </fsm>\n            <!-- SCHED_SWITCH FSM ACTIONS -->\n            <!-- Update the value of the current running thread -->\n            <action id=\"update Current_thread\">\n                <stateChange>\n                    <stateAttribute type=\"location\"\n                                    value=\"CurrentCPU\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"Current_thread\" />\n                    <stateValue type=\"eventField\"\n                                value=\"next_tid\" />\n                </stateChange>\n            </action>\n            <!-- sched_switch fsm\n\t\tDeclare an FSM to update the value of the current thread running.\n\t\tThe FSM will generate a state change to update the current thread, each time that it will meet a sched_switch event. -->\n            <fsm id=\"sched_switch\"\n                 multiple=\"false\">\n                <!-- if event.name != sched_switch, no processing will be done -->\n                <precondition event=\"sched_switch\" />\n                <initial>\n                    <transition target=\"sched_switch\" />\n                </initial>\n                <state id=\"sched_switch\">\n                    <!-- The state will stay here forever and execute the action \"update current thread\" each time a sched_switch event will be meet -->\n                    <transition target=\"sched_switch\"\n                                action=\"update Current_thread\" />\n                </state>\n            </fsm>\n        </patternHandler>\n    </pattern>\n</tmfxml>"
        },
        "Test FSM to handle entry, action, and exit events within a time range, generate pattern segments for same CPU.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <pattern version=\"0\"\n             id=\"xml.core.tests.simple.pattern\">\n        <head>\n            <traceType id=\"org.eclipse.linuxtools.tmf.core.tests.xmlstub\" />\n            <label value=\"XML simple pattern test\" />\n        </head>\n        <!-- the pattern handler specifies the FSM that will be instanciated at the beginning of the analysis -->\n        <patternHandler initial=\"testTimeConditions\">\n            <!-- CONDITIONS -->\n            <test id=\"sameCpu\">\n                <if>\n                    <condition>\n                        <stateAttribute type=\"constant\"\n                                        value=\"#CurrentScenario\" />\n                        <stateAttribute type=\"constant\"\n                                        value=\"cpu\" />\n                        <stateValue type=\"eventField\"\n                                    value=\"cpu\" />\n                    </condition>\n                </if>\n            </test>\n            <test id=\"timeRange\">\n                <if>\n                    <condition>\n                        <timerange unit=\"ns\">\n                            <in begin=\"5\"\n                                end=\"20\" />\n                        </timerange>\n                    </condition>\n                </if>\n            </test>\n            <test id=\"smallExec\">\n                <if>\n                    <condition>\n                        <elapsedTime unit=\"ns\">\n                            <less since=\"waitEnd\"\n                                  value=\"4\" />\n                        </elapsedTime>\n                    </condition>\n                </if>\n            </test>\n            <!-- ACTIONS -->\n            <action id=\"startEvent\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"#CurrentScenario\" />\n                    <stateAttribute type=\"constant\"\n                                    value=\"cpu\" />\n                    <stateValue type=\"eventField\"\n                                value=\"cpu\" />\n                </stateChange>\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"CPU\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"cpu\" />\n                    <stateValue type=\"int\"\n                                value=\"1\" />\n                </stateChange>\n            </action>\n            <action id=\"incrementEvents\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"CPU\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"cpu\" />\n                    <stateValue type=\"int\"\n                                value=\"1\"\n                                increment=\"true\" />\n                </stateChange>\n            </action>\n            <action id=\"doSegment\">\n                <!-- Generate a pattern segment with the name 'test2' and with three fields 'field1', 'field2' and 'field2' -->\n                <segment>\n                    <segType>\n                        <segName>\n                            <stateValue type=\"query\">\n                                <stateAttribute type=\"constant\"\n                                                value=\"CPUs\" />\n                                <stateAttribute type=\"query\">\n                                    <stateAttribute type=\"constant\"\n                                                    value=\"#CurrentScenario\" />\n                                    <stateAttribute type=\"constant\"\n                                                    value=\"cpu\" />\n                                </stateAttribute>\n                            </stateValue>\n                        </segName>\n                    </segType>\n                </segment>\n            </action>\n            <action id=\"resetCount\">\n                <stateChange>\n                    <stateAttribute type=\"constant\"\n                                    value=\"CPU\" />\n                    <stateAttribute type=\"eventField\"\n                                    value=\"cpu\" />\n                    <stateValue type=\"delete\" />\n                </stateChange>\n            </action>\n            <!-- FSMs -->\n            <!-- test fsm\n\t\tDeclare a test FSM that that will generate two segments for each event received -->\n            <fsm id=\"testTimeConditions\"\n                 multiple=\"true\"\n                 initial=\"waitBegin\">\n                <state id=\"waitBegin\">\n                    <!-- wait for an entry event within time range -->\n                    <transition event=\"entry\"\n                                cond=\"timeRange\"\n                                target=\"waitEnd\"\n                                action=\"startEvent\" />\n                </state>\n                <state id=\"waitEnd\">\n                    <!-- wait for exit, will create segment only longer than 5 -->\n                    <transition event=\"action\"\n                                cond=\"sameCpu\"\n                                target=\"waitEnd\"\n                                action=\"incrementEvents\" />\n                    <transition event=\"exit\"\n                                cond=\"sameCpu:smallExec\"\n                                target=\"endTest\"\n                                action=\"doSegment:resetCount\" />\n                    <transition event=\"exit\"\n                                cond=\"sameCpu\"\n                                target=\"endTest\"\n                                action=\"resetCount\" />\n                </state>\n                <final id=\"endTest\" />\n            </fsm>\n        </patternHandler>\n    </pattern>\n</tmfxml>"
        },
        "Create a TimeGraphView for 'Xml Timegraph View Test' with state values 'NONE' and 'VALID' and a display entry for 'checkpoint'.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n    <timeGraphView id=\"org.eclipse.linuxtools.tmf.analysis.xml.ui.views.controlflow\">\n        <head>\n            <analysis id=\"test.xml.conditions\" />\n            <label value=\"Xml Timegraph View Test\" />\n        </head>\n        <!-- StateValues -->\n        <definedValue name=\"NONE\"\n                      value=\"0\"\n                      color=\"#EEEEEE\" />\n        <definedValue name=\"VALID\"\n                      value=\"1\"\n                      color=\"#FF0000\" />\n        <entry path=\"checkpoint\"\n               displayText=\"true\">\n            <display type=\"self\" />\n        </entry>\n    </timeGraphView>\n</tmfxml>"
        },
        "Show me the irqs vs time where you store the irq name it should be categorized by a tid.": {
            "User_inputted": true,
            "LLM_Snippet": false,
            "XML": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <tmfxml xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"xmlDefinition.xsd\">\n        <timeGraphView id=\"xml.scenarios\">\n            <head>\n                <analysis id=\"lttng.analysis.irq\" />\n                <label value=\"Scenarios\" />\n            </head>\n            <definedValue name=\"PENDING\" value=\"0\" color=\"#CCCCCC\" />\n            <definedValue name=\"IN_PROGRESS\" value=\"1\" color=\"#00CCFF\" />\n            <definedValue name=\"MATCHED\" value=\"2\" color=\"#118811\" />\n            <definedValue name=\"ABANDONED\" value=\"3\" color=\"#EE0000\" />\n            <entry path=\"scenarios/*\">\n                <display type=\"self\" />\n                <name type=\"self\" />\n                <entry path=\"*\">\n                    <display type=\"constant\" value=\"state\" />\n                    <name type=\"self\" />\n                </entry>\n            </entry>\n        </timeGraphView>\n        <pattern version=\"0\" id=\"lttng.analysis.irq\">\n            <head>\n                <traceType id=\"org.eclipse.linuxtools.lttng2.kernel.tracetype\" />\n                <label value=\"IRQ Analysis\"/>\n                <viewLabelPrefix value=\"IRQ\" />\n            </head>\n            <storedField id=\"ret\" alias=\"ret\" />\n            <location id=\"CurrentCPU\">\n                <stateAttribute type=\"constant\" value=\"CPUs\" />\n                <stateAttribute type=\"eventField\" value=\"cpu\" />\n            </location>\n            <patternHandler>\n                <test id=\"test_cpu\">\n                    <if>\n                        <condition>\n                            <stateValue type=\"query\">\n                                <stateAttribute type=\"constant\" value=\"#CurrentScenario\" />\n                                <stateAttribute type=\"constant\" value=\"cpu\" />\n                            </stateValue>\n                            <stateValue type=\"eventField\" value=\"cpu\" />\n                        </condition>\n                    </if>\n                </test>\n                <action id=\"irq_handler_entry\">\n                    <stateChange>\n                        <stateAttribute type=\"constant\" value=\"#CurrentScenario\" />\n                        <stateAttribute type=\"constant\" value=\"irq\" />\n                        <stateValue type=\"eventField\" value=\"irq\" />\n                    </stateChange>\n                    <stateChange>\n                        <stateAttribute type=\"constant\" value=\"#CurrentScenario\" />\n                        <stateAttribute type=\"constant\" value=\"name\" />\n                        <stateValue type=\"eventField\" value=\"name\" />\n                    </stateChange>\n                    <stateChange>\n                        <stateAttribute type=\"constant\" value=\"#CurrentScenario\" />\n                        <stateAttribute type=\"constant\" value=\"cpu\" />\n                        <stateValue type=\"eventField\" value=\"cpu\" />\n                    </stateChange>\n                </action>\n                <action id=\"irq_handler_exit\">\n                    <segment>\n                        <segType>\n                            <segName>\n                                <stateValue type=\"query\">\n                                    <stateAttribute type=\"constant\" value=\"#CurrentScenario\" />\n                                    <stateAttribute type=\"constant\" value=\"name\" />\n                                </stateValue>\n                            </segName>\n                        </segType>\n                        <segContent>\n                            <segField name=\"ret\" type=\"long\">\n                                <stateValue type=\"eventField\" value=\"ret\" />\n                            </segField>\n                            <segField name=\"irq\" type=\"long\">\n                                <stateValue type=\"query\">\n                                    <stateAttribute type=\"constant\" value=\"#CurrentScenario\" />\n                                    <stateAttribute type=\"constant\" value=\"irq\" />\n                                </stateValue>\n                            </segField>\n                            <segField name=\"cpu\" type=\"long\">\n                                <stateValue type=\"eventField\" value=\"cpu\" />\n                            </segField>\n                        </segContent>\n                    </segment>\n                </action>\n                <fsm id=\"irq_handler\" initial=\"wait_irq_entry\">\n                    <precondition event=\"irq_handler_*\" />\n                    <state id=\"wait_irq_entry\">\n                        <transition event=\"irq_handler_entry\" target=\"wait_irq_exit\"\n                            action=\"irq_handler_entry\" />\n                    </state>\n                    <state id=\"wait_irq_exit\">\n                        <transition event=\"irq_handler_exit\" cond=\"test_cpu\"\n                            target=\"irq\" action=\"irq_handler_exit\" />\n                    </state>\n                    <final id=\"irq\" />\n                </fsm>\n                <action id=\"update_current_thread\">\n                    <stateChange>\n                        <stateAttribute type=\"location\" value=\"CurrentCPU\" />\n                        <stateAttribute type=\"constant\" value=\"Current_thread\" />\n                        <stateValue type=\"eventField\" value=\"next_tid\" />\n                    </stateChange>\n                </action>\n                <fsm id=\"sched_switch\" multiple=\"false\">\n                    <precondition event=\"sched_switch\" />\n                    <state id=\"sched_switch\">\n                        <transition event=\"sched_switch\" target=\"sched_switch\"\n                            action=\"update_current_thread\" />\n                    </state>\n                </fsm>\n            </patternHandler>\n        </pattern>\n    </tmfxml>"
        }
    },
    "LLM_Generated": {
        "Generate a segment with the name 'test2' and with three fields 'field1', 'field2', and 'field3'.": {
            "User_inputted": false,
            "LLM_Snippet": true,
            "XML": "The refined prompt requires creating an XML fragment for the 'test2' segment, which should include three fields: 'field1', 'field2', and 'field3'. The structure of this XML fragment must follow the LTTNG (Linux Trace Logging) format as specified in the provided intermediate representation.\n\nThe first step is to create a new pattern handler with an id of 'test2' under the 'patternHandler' element of the 'action' element that follows the initial segment ('initial': 'test'). This will ensure that the new segment is included in the overall trace pattern.\n\nNext, we need to define three segments for the fields 'field1', 'field2', and 'field3'. Each segment should have a segType attribute with a value of 'segType' and a segName attribute with a unique name for each field (e.g., 'test1', 'test2', etc.).\n\nAfter defining the segments, we need to define their content using the 'segField' element. For each segment, we should specify its name ('name'), type ('type'), and value ('value'). In this case, since these are fields in a trace pattern, we will use eventField as the type for all three segments.\n\nFinally, we need to define the state machine (fsm) that manages the transitions between states based on events. We should create two states - 'state1' and 'state2' - with an initial state of 'state1'. Each transition should have an event attribute specifying the name of the field being observed ('event'), a target attribute specifying the next state to move to, and an action attribute that references the corresponding pattern segment (e.g., 'pattern segment test 1').\n\nThe resulting XML fragment for the 'test2' segment would look something like this:\n```xml\n<action id=\"pattern segment test 2\">\n    <segment segType=\"segType\" segName=\"test2\">\n        <segField name=\"field1\" type=\"eventField\" value=\"testField\"/>\n        <segField name=\"field2\" type=\"eventField\" value=\"test\"/>\n        <segField name=\"field3\" type=\"eventField\" value=\"1\"/>\n    </segment>\n</action>\n<fsm id=\"test\" multiple=\"true\" initial=\"state1\">\n    <state id=\"state1\">\n        <transition event=\"test2\" target=\"state2\" action=\"pattern segment test 2\"/>\n    </state>\n    <state id=\"state2\">\n        <!-- transitions for state2 -->\n    </state>\n</fsm>\n```"
        },
        "Extract the <action id=save_pool> element and its contents from the XML.": {
            "User_inputted": false,
            "LLM_Snippet": true,
            "XML": "The following is an example of how to extract the <action id=\"save_pool\"> element:\n```xml\n<action id=\"save_pool\" />\n```\nExplanation: To extract the <action id=\"save_pool\"> element, its attributes (id), and all of its contents from the XML document, we need to locate the element in the intermediate representation. We can do this by searching for the tag name \"action\", then filtering based on the attribute value \"save\\_pool\". Once we have located the element, we can extract it using an XML parser or a programming language that supports parsing XML documents.\n```xml\n<action id=\"save_pool\" />\n```\nThe resulting XML fragment would be:\n```xml\n<action id=\"save_pool\">\n  <stateChange>\n    <stateAttribute type=\"constant\" value=\"Operations\"/>\n    <stateAttribute type=\"pool\" value=\"op\"/>\n  </stateChange>\n</action>\n```"
        }
    }
}